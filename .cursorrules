# Cursor Configuration for Figma-Context-MCP

# This file configures the Figma MCP server for Cursor

# MCP Server Configuration

{
"mcpServers": {
"Framelink Figma MCP": {
"command": "npx",
"args": ["-y", "figma-developer-mcp", "--figma-api-key=YOUR_FIGMA_API_KEY", "--stdio"]
},
"GitHub MCP": {
"command": "npx",
"args": ["-y", "@modelcontextprotocol/server-github", "--stdio"],
"env": {
"GITHUB_TOKEN": "${GITHUB_TOKEN}"
}
},
"Browser MCP": {
"command": "npx",
"args": ["@browsermcp/mcp@latest"]
}
}
}

# Instructions:

# 1. Replace YOUR_FIGMA_API_KEY with your actual Figma API key

# 2. Get your Figma API key from: https://www.figma.com/settings

# 3. Restart Cursor after making changes

# Development Rules:

# - All commit messages must be written in Japanese

# - Use descriptive commit messages that explain what was changed and why

# - Follow conventional commit format when possible

# - Fix all Linter Errors before committing

# - Ensure code quality by resolving all linting issues

# - Run linting checks before pushing code

# Chat Session Rules:

# - When a new chat session starts, ALWAYS check the files in docs/chat-prompts/ first

# - Review initial-setup.md to understand current project status

# - Follow development-guidelines.md for coding standards

# - Use figma-integration.md for Figma-related tasks

# - Use github-mcp-commands.md for GitHub MCP operations

# - Ensure project context is properly understood before proceeding

# New Chat Session Workflow:

# - ALWAYS use GitHub MCP to check current issue status first

# - Get open issues and identify priority tasks

# - Propose next tasks based on GitHub issue status

# - Consider dependencies and parallel execution possibilities

# - Provide clear action plan based on issue analysis

# Development Workflow Rules:

# - Always follow the GitHub Flow: issue → branch → commit → push → PR → review → merge

# - Ensure code quality by resolving all linting issues before push

# - Include issue number in commit messages (fixes #123)

# - Create feature branches with format: feature/issue-{number}-{title}

# - Ensure all linting errors are resolved before committing

# GitHub Operations Rules:

# - Use GitHub MCP for all GitHub operations (issues, PRs, repositories)

# - Do not use direct GitHub API calls or curl commands for GitHub operations

# - Use GitHub MCP to create, update, and manage issues

# - Use GitHub MCP to search and retrieve repository information

# - Follow the GitHub MCP setup guide in docs/chat-prompts/github-mcp-commands.md

# Issue Management Rules:

# - All project tasks are managed through GitHub issues

# - Use enhancement labels for new features (parent issues)

# - Use task labels for implementation tasks (sub-issues)

# - Use phase1-4 labels for development phases

# - Use specific labels: setup, implementation, api, design, optimization, deploy, section, microcms, google-apps-script, figma-mcp

# Progress Management Rules:

# - Use GitHub MCP for all progress management operations

# - Update issue content directly for progress updates

# - Use comments for detailed progress reports

# - Change labels based on status: in-progress, completed, blocked, review

# - Assign tasks to appropriate team members

# - Report progress regularly with detailed updates

# - Report blocking issues immediately with detailed descriptions

# - Use progress report templates from development-guidelines.md

# - Close issues only after completion and review

# - Link commits to issues using "fixes #issue-number" format
