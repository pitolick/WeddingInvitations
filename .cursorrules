# Cursor Configuration for Figma-Context-MCP

# このファイルはCursor用のFigma MCPサーバーを設定します

# MCP Server Configuration

{
"mcpServers": {
"Framelink Figma MCP": {
"command": "npx",
"args": ["-y", "figma-developer-mcp", "--figma-api-key=YOUR_FIGMA_API_KEY", "--stdio"]
},
"GitHub MCP": {
"command": "npx",
"args": ["-y", "@modelcontextprotocol/server-github", "--stdio"],
"env": {
"GITHUB_TOKEN": "${GITHUB_TOKEN}"
}
},
"Browser MCP": {
"command": "npx",
"args": ["@browsermcp/mcp@latest"]
}
}
}

# 設定手順:

# 1. YOUR_FIGMA_API_KEYを実際のFigma APIキーに置き換えてください

# 2. Figma APIキーは以下から取得してください: https://www.figma.com/settings

# 3. 変更後はCursorを再起動してください

# 開発ルール:

# - 全てのコミットメッセージは日本語で記述すること

# - 変更内容と理由を説明する説明的なコミットメッセージを使用すること

# - 可能な限りconventional commit形式に従うこと

# - コミット前に全てのLinterエラーを修正すること

# - コード品質を確保するため、lintingの問題を解決すること

# - プッシュ前にlintingチェックを実行すること

# - Next.js App Routerのベストプラクティスに従い、Server/Client Componentsを適切に分離すること

# - 全ての関数、クラス、インターフェースに日本語のJSDocsコメントを記述すること

# - 必須JSDocsタグを含めること: @description, @param, @returns, @example

# - 該当する場合はオプションJSDocsタグを含めること: @throws, @deprecated, @since

# - 可能な限りTailwind CSSクラスをインラインスタイルより優先すること

# - 動的スタイリングが絶対に必要な場合のみstyle属性を使用すること

# - デバッグにはsrc/app/lib/loggerのVibeCoding Loggerを使用すること

# - デバッグ情報はlogsフォルダで確認すること

# Next.js App Router Component Design Rules:

# - page.tsxとlayout.tsxはServer Componentsとして実装すること

# - SEO最適化のためpage.tsxでmetadata exportを使用すること

# - インタラクティブな機能は{ComponentName}Client.tsx命名でClient Componentsに分離すること

# - 必要に応じてServer ComponentsからClient Componentsをインポートすること

# - "use client"ディレクティブはClient Componentsでのみ使用すること

# - パフォーマンスとSEOのため、Server Componentsをデフォルトとして保持すること

# Chat Session Rules:

# - 新しいチャットセッション開始時は、必ずdocs/chat-prompts/のファイルを最初に確認すること

# - initial-setup.mdを確認して現在のプロジェクト状況を理解すること

# - development-guidelines.mdに従ってコーディング標準を守ること

# - Figma関連タスクにはfigma-integration.mdを使用すること

# - GitHub MCP操作にはgithub-mcp-commands.mdを使用すること

# - プロジェクトコンテキストが適切に理解されていることを確認してから進めること

# New Chat Session Workflow:

# - 利用可能な方法（GitHub MCP、API、Webインターフェース等）で現在のissue状況を確認すること

# - openなissueを取得し、優先タスクを特定すること

# - GitHub issue状況に基づいて次のタスクを提案すること

# - 依存関係と並行実行の可能性を考慮すること

# - issue分析に基づいて明確なアクションプランを提供すること

# Development Workflow Rules:

# - 常にGitHub Flowに従うこと: issue → branch → commit → push → PR → review → merge

# - 全ての開発作業はissueごとにブランチを切ること

# - ブランチ命名規則: feature/issue-{number}-{title}形式を使用すること

# - プルリクエストのレビューを解決後にmainブランチにマージすること

# - レビュー承認前にマージすることは禁止すること

# - GitHub Copilotを全てのプルリクエストにレビュー者としてアサインすること

# - GitHub Copilotのレビュー承認が必要であること

# - プッシュ前にlinting問題を解決してコード品質を確保すること

# - コミットメッセージにissue番号を含めること（fixes #123）

# - feature/issue-{number}-{title}形式でfeatureブランチを作成すること

# - コミット前に全てのlintingエラーが解決されていることを確認すること

# - プルリクエストの説明には実装内容、変更理由、テスト結果を記載すること

# - 最低1名のレビュー承認を得てからマージすること

# - マージ前に全ての品質チェック（テスト・lint・format）が通ることを確認すること

# - ブランチ作成後とプルリクエスト作成後にissueとの紐づけを行うこと

# GitHub Operations Rules:

# - GitHub MCP を優先し、利用不可の場合のフェールオーバーとして
#   GitHub CLI（ghコマンド）を使用してもよい

# - 必要に応じてGitHub操作に直接GitHub API呼び出しやcurlコマンドを使用すること

# - 利用可能な場合はGitHub MCPでissueの作成、更新、管理を行うこと

# - 利用可能な場合はGitHub MCPでリポジトリ情報の検索と取得を行うこと

# - MCP使用時はdocs/chat-prompts/github-mcp-commands.mdのGitHub MCPセットアップガイドに従うこと

# - GitHub情報の取得には利用可能な方法（MCP、API、Webインターフェース、GitHub CLI等）を使用すること

# Issue Management Rules:

# - 全てのプロジェクトタスクはGitHub issuesで管理すること

# - 新機能にはenhancementラベルを使用すること（親issue）

# - 実装タスクにはtaskラベルを使用すること（子issue）

# - 開発フェーズにはphase1-4ラベルを使用すること

# - 特定ラベルを使用すること: setup, implementation, api, design, optimization, deploy, section, microcms, google-apps-script, figma-mcp

# Progress Management Rules:

# - 利用可能な場合はGitHub MCPを進捗管理操作に使用すること

# - 進捗更新には利用可能な方法でissue内容を更新すること

# - 詳細な進捗レポートにはコメントを使用すること

# - 状況に基づいてラベルを変更すること: in-progress, completed, blocked, review

# - 適切なチームメンバーにタスクを割り当てること

# - 詳細な更新で定期的に進捗を報告すること

# - 詳細な説明でブロッキングissueを即座に報告すること

# - development-guidelines.mdの進捗レポートテンプレートを使用すること

# - 完了とレビューの後にのみissueをクローズすること

# - "fixes #issue-number"形式でコミットをissueにリンクすること

# - GitHub情報の取得には利用可能な方法（MCP、API、Webインターフェース等）を使用すること

# Task Completion Workflow Rules:

# - タスク完了後は常にアクション検証を実行すること

# - 開発サーバーを実行して機能を確認すること: npm run dev

# - Linterエラーを確認すること: npm run lint

# - TypeScriptエラーを確認すること: npx tsc --noEmit

# - レスポンシブデザインとブラウザ互換性を確認すること

# - 可能な限りインラインスタイルの代わりにTailwind CSSクラスを使用すること

# - 日本語メッセージ形式でコミットすること: "feat: {description} fixes #{issue_number}"

# - クローズ前に完了レポートでissueを更新すること

# - 成功完了後にissueラベルを"completed"に変更すること

# - 全ての検証ステップが完了した後にのみissueをクローズすること

# - development-guidelines.mdのタスク完了ワークフローに従うこと

# - タスク完了としてマークする前に全ての品質チェックが通ることを確認すること

# - Server/Client Component分離が適切に実装されていることを確認すること

# Debugging Rules:

# - デバッグにはsrc/app/lib/loggerのVibeCoding Loggerを使用すること

# - デバッグ情報はlogsフォルダで確認すること

# - context、humanNote、aiTodoフィールドで構造化ログを使用すること

# - ログファイルはlogs/wedding-invitations/ディレクトリに自動生成されること

# - 開発環境デバッグにはdevLoggerを使用すること

# - 一般的なログパターン（ユーザーアクション、エラー、API呼び出し）にはlogUtilsを使用すること

# コミット運用ルール

# - コミット時に `--no-verify` オプションを付与して、Husky等のプリフックによるテスト・Lint・Formatチェックを回避することを**禁止**します。
#   - 必ず全てのチェックが通った状態でコミットすること
#   - 強制コミットが必要な場合は、必ずリーダーの承認を得てから実施すること
# - コミット時はテスト・lint・format必須
#   - 全てのコミットでテスト・lint・formatチェックが通ることを確認すること
#   - エラーがある場合は修正してからコミットすること
#   - 品質を保つため、チェックをスキップすることは禁止
