# Cursor Configuration for Figma-Context-MCP

# This file configures the Figma MCP server for Cursor

# MCP Server Configuration

{
"mcpServers": {
"Framelink Figma MCP": {
"command": "npx",
"args": ["-y", "figma-developer-mcp", "--figma-api-key=YOUR_FIGMA_API_KEY", "--stdio"]
},
"GitHub MCP": {
"command": "npx",
"args": ["-y", "github-mcp-custom", "--stdio"],
"env": {
"GITHUB_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}",
"GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}"
}
}
}
}

# Instructions:

# 1. Replace YOUR_FIGMA_API_KEY with your actual Figma API key

# 2. Get your Figma API key from: https://www.figma.com/settings

# 3. Restart Cursor after making changes

# Development Rules:

# - All commit messages must be written in Japanese

# - Use descriptive commit messages that explain what was changed and why

# - Follow conventional commit format when possible

# - Fix all Linter Errors before committing

# - Ensure code quality by resolving all linting issues

# - Run linting checks before pushing code

# Chat Session Rules:

# - When a new chat session starts, ALWAYS check the files in docs/chat-prompts/ first

# - Review initial-setup.md to understand current project status

# - Follow development-guidelines.md for coding standards

# - Use figma-integration.md for Figma-related tasks

# - Ensure project context is properly understood before proceeding

# Development Workflow Rules:

# - Always follow the GitHub Flow: issue → branch → commit → push → PR → review → merge

# - Ensure code quality by resolving all linting issues before push

# - Include issue number in commit messages (fixes #123)

# - Create feature branches with format: feature/issue-{number}-{title}

# - Ensure all linting errors are resolved before committing
